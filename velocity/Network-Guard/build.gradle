plugins {
    id 'java'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
    id 'xyz.jpenilla.run-velocity' version '2.3.1'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'me.kalbskinder'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = 'velocity-snapshots'
        url = 'https://repo.papermc.io/repository/snapshots/'
    }
}

dependencies {
    compileOnly 'com.velocitypowered:velocity-api:3.4.0-SNAPSHOT'
    annotationProcessor 'com.velocitypowered:velocity-api:3.4.0-SNAPSHOT'
    implementation 'dev.dejvokep:boosted-yaml:1.3.6'
    implementation 'mysql:mysql-connector-java:8.0.33'
    compileOnly 'org.slf4j:slf4j-api:2.0.7'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation "net.kyori:adventure-text-minimessage:4.24.0"
}

tasks {
    runVelocity {
        velocityVersion '3.4.0-SNAPSHOT'
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from(sourceSets.main.resources) {
            include '**/*.yml'
            include 'velocity-plugin.json'
        }
    }

    shadowJar {
        archiveClassifier.set('')
        relocate 'dev.dejvokep.boostedyaml', 'me.plugin.libs.boostedyaml'
        relocate 'com.mysql', 'me.plugin.libs.mysql'
        mergeServiceFiles()
    }

    build {
        dependsOn shadowJar
    }

    jar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

def targetJavaVersion = 17
java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(targetJavaVersion)
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = ['version': project.version]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

project.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
